#+TITLE: Debian Package Management System
#+AUTHOR: K.L.MaheeSurya
#+AUTHOR: NIKHIL REDDY
#+DATE: [2017-12-17 Tue]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Introduction
  The popularity of Debian Packages is growing steadily. This is because Debian Packages
  have a large set of helper scripts, a consistent policy manual and at least one way of doing 
  almost everything. Dependencies are handled very well and can be defined in very good 
  granularity. Re-building packages is very easy with debian packages and well supported 
  by the tools available. Moreover, Debian packages are used for Ubuntu distributions.

* First Approach for building .deb packages
  The exploration for this approach is done from this [[http://www.king-foo.com/2011/11/creating-debianubuntu-deb-packages/][link]].
** Installing the deb package tools
#+BEGIN_EXAMPLE
sudo apt-get install build-essential
#+END_EXAMPLE
** Creating the Package Directories
#+BEGIN_SRC : deb.sh
mkdir -p package/DEBIAN
cd package/DEBIAN
#+END_SRC
** Creating the control file
#+BEGIN_SRC : deb.sh
touch control
#+END_SRC
** Configuring the control file
   Usually, the fields: 
   + Package
   + Version
   + Maintainer
   + Architecture
   + Description
   are mandatory in the control file.
#+BEGIN_EXAMPLE
package : hello
Version : 1.0.1
Section : base
Priority : optional
Architecture : all
Depends : debcont(>= 0.2.26)
Maintainer :
Description :
#+END_EXAMPLE

   Additional options can be found at the link [[https://www.debian.org/doc/debian-policy/#s-binarycontrolfiles][Control File]].
** Packaging the files
   The files in the package need to be placed in a directory structure
   which is followed while extracting the package.
   For example, a file which needs to be placed in /usr/local/bin/ 
   should be placed in package/usr/local/bin/ 
   The debian package structure ensures that the files are directed 
   to their destinations upon installation.
** Post-installation Script
   A Post-installation script is generally placed in the DEBIAN directory.
   It is an executable file which runs upon the completion of the installation.
#+BEGIN_SRC : deb.sh
touch DEBIAN/postinst
#+END_SRC
** Building the package
   The following command builds the package.
#+BEGIN_SRC : deb.sh
sudo dpkg-deb --build package/
#+END_SRC
** Extracting the package
#+BEGIN_SRC : deb.sh
sudo dpkg dpkg -i hello.deb
#+END_SRC

* Problems with the first approach
  There were some problems with this approach. The example at [[http://www.king-foo.com/2011/11/creating-debianubuntu-deb-packages/][link]] focuses
  on a small package. Hence, trying it for a large package such as college cloud
  caused many difficulties. The main problem is that the package created by this method
  is not fully compatible with Ubuntu. When we try to extract the package, we are 
  greeted with "Unknown Architecture extraction failed".
  Hence, this approach was abondoned.
* Second Approach
  This approach is carried out in accordance with official documentation of
  DEBIAN. The documentation can be found at this [[https://debian-administration.org/article/337/Rolling_your_own_Debian_packages_part_2][link]].
** Installing the tools
#+BEGIN_SRC : deb2.sh
apt-get install dh-make dpkg-dev debhelper devscripts fakeroot linda
#+END_SRC
** Naming the directory
   dh_make requires the source directory to be named according to the common pattern 
   packagename-version.
   After creating the source directory as per naming conventions, the following
   command is executed inside the directory.
#+BEGIN_SRC : deb2.sh
dh_make -n -s -e emailOf@PackageBuilder.com
#+END_SRC
   This creates the working directory and the corresponding control and rules files.
   These files need to be edited as per the requirements.
** Other Steps
   The other steps are given in the link which is already mentioned.

* Problems with Second Approach
  The second approach fares well compared to the first approach as the required 
  files are autogenerated and the package is fully compliant to Ubuntu.
  But the location of source package is not mentioned in the link. This makes it
  difficult to place the source files in the package let alone extract it.
  After confirming the location of source packages, one needs to write a 
  pre-installation/post-installation script to do the other work. This completes the
  approach.

* Conclusion
  After exploring for a whole week about RPM and DEBIAN package management systems,
  we found a proper documentation regarding the creation of debian packages.
  But, as the deadline for deployment of labs is fast approaching, we halted the
  package creation and documented all our efforts. Hence, we couldn't explore the
  documentation.
